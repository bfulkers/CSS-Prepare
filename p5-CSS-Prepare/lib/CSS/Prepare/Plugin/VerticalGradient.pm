package CSS::Prepare::Plugin::VerticalGradient;

use Modern::Perl;
use CSS::Prepare::Property::Expansions;
use CSS::Prepare::Property::Values;

my $get_gradient_values = qr{
        (?'start' $colour_value ) \, \s*
        (?'end'   $colour_value )
    }x;

sub expand {
    my $self     = shift;
    my $property = shift;
    my $value    = shift;
    my $selectors = shift;
    
    if ( '-cp-vertical-gradient' eq $property ) {
        if ( $value =~ m{^ $get_gradient_values $}x ) {
            my %match        = %+;
            my $start_colour = shorten_colour_value( $match{'start'} );
            my $end_colour   = shorten_colour_value( $match{'end'} );
        
            my $webkit = "-webkit-gradient(linear,left top,left bottom,"
                         . "from(${start_colour}),to(${end_colour}))";
            my $moz    = "-moz-linear-gradient("
                         . "top,${start_colour},${end_colour})";
            my $ie     = "progid:DXImageTransform.Microsoft.gradient("
                         . "startColorstr='${start_colour}',"
                         . "endColorstr='${end_colour}')";
            
            return [
                    {
                        property => '-ms-filter',
                        value    => $ie,
                    },
                    {
                        property => '*filter',
                        value    => $ie,
                    },
                ],
                [],
                [
                    {
                        block => { 'background-image' => $webkit, },
                        selectors => $selectors,
                    },
                    {
                        block => { 'background-image' => $moz, },
                        selectors => $selectors,
                    },
                ];
        }
        # TODO should have errors generated by plugins for invalid values
    }
    
    return;
}
sub output {
    # my $self  = shift;
    # my $block = shift;
    # 
    # my @output;
    # my $value = $block->{'opacity'};
    # push @output, sprintf $self->output_format, 'opacity:', $value
    #     if defined $value;
    # 
    # return @output;
}
sub parse {}

1;

__END__

=head1 -cp-vertical-gradient

The meta-property C<-cp-vertical-gradient> will be expanded to provide 
vertical gradients for Webkit (C<-webkit-gradient>), Gecko (C<-moz-linear-gradient>) and Trident (C<DXImageTransform.Microsoft.gradient>). For example, an input of:

    #stripe { -cp-vertical-gradient: #ccc, #000; }

will be output as:

    #stripe {
        -ms-filter:progid:DXImageTransform.Microsoft.gradient(
            startColorstr='#ccc',endColorstr='#000');
        *filter:progid:DXImageTransform.Microsoft.gradient(
            startColorstr='#ccc',endColorstr='#000');
    }
    #stripe {
        background-image:-webkit-gradient(
            linear,left top,left bottom,from(#ccc),to(#000));
    }
    #stripe {
        background-image:-moz-linear-gradient(top,#ccc,#000);
    }
